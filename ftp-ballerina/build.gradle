/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/plugin-gradle'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
    }
    dependencies {
        classpath "io.ballerina:plugin-gradle:0.8.2-SNAPSHOT"
    }
}

description = 'Ballerina - Ballerina FTP Library'

def packageName = "ftp"
def packageOrg = "ballerina"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaConfigFile = new File("$project.projectDir/Ballerina.toml")
def ballerinaDependencyFile = new File("$project.projectDir/Dependencies.toml")
def originalConfig = ballerinaConfigFile.text
def originalDependencyConfig = ballerinaDependencyFile.text

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-');
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

configurations {
    packingJars
}

dependencies {
    packingJars (group: 'org.apache.commons', name: 'commons-vfs2', version: "${commonsVfsVersion}") {
        transitive = false
    }
    packingJars (group: 'commons-net', name: 'commons-net', version: "${commonsNetVersion}") {
        transitive = false
    }
    packingJars (group: 'org.mockftpserver', name: 'MockFtpServer', version: "${mockFtpServerVersion}") {
        transitive = false
    }
    packingJars (group: 'org.testng', name: 'testng', version: "${testngVersion}") {
        transitive = false
    }
    packingJars (group: 'org.slf4j', name: 'slf4j-api', version: "${slf4jVersion}") {
        transitive = false
    }
    packingJars (group: 'org.wso2.transport.file', name: 'org.wso2.transport.remote-file-system', version: "${fileTransportVersion}") {
        transitive = false
    }
}

apply plugin: 'io.ballerina.plugin'

ballerina{
    module = packageName
    langVersion = ballerinaLangVersion
}

task copyPackingJarsToLib(type: Copy) {
    into "$project.projectDir/lib"
    from configurations.packingJars
}

task updateTomlVersions {
    doLast {
        def stdlibDependentTaskVersion = stripBallerinaExtensionVersion(project.stdlibTaskVersion)
        def stdlibDependentLogVersion = stripBallerinaExtensionVersion(project.stdlibLogVersion)
        def stdlibDependentIoVersion = stripBallerinaExtensionVersion(project.stdlibIoVersion)
        def newConfig = ballerinaConfigFile.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        ballerinaConfigFile.text = newConfig

        def newDependencyConfig = ballerinaDependencyFile.text.replace("@stdlib.io.version@", stdlibDependentIoVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.log.version@", stdlibDependentLogVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.task.version@", stdlibDependentTaskVersion)
        ballerinaDependencyFile.text = newDependencyConfig
    }
}

task revertTomlFile {
    doLast {
        ballerinaConfigFile.text = originalConfig
        ballerinaDependencyFile.text = originalDependencyConfig
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-${packageOrg}-${packageName}")
            credentials {
                username = System.getenv("publishUser")
                password = System.getenv("publishPAT")
            }
        }
    }
}

build.dependsOn ":${packageName}-native:build"
build.dependsOn ":${packageName}-test-utils:build"
test.dependsOn ":${packageName}-native:build"
test.dependsOn ":${packageName}-test-utils:build"
updateTomlVersions.dependsOn copyStdlibs
unpackJballerinaTools.dependsOn copyPackingJarsToLib

publishToMavenLocal.dependsOn build
publish.dependsOn build
